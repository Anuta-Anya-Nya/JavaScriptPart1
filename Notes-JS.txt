bJS - язык программирования, добавляет интерактив на страницу и взаимодействие с пользователем 
БЕЗ СТРОГОЙ ТИПИЗАЦИИ

программы, содержащие движок для выполнения JS:
веб-браузер+
Среды выполнения:
    Node.js (бэкекнд - серверное программирование) серверые возможности с Ubuntu
    Deno
    Electron + windows
Другое ПО где есть интерпритатор или компилятор JS кода 

Стандарты JS - ECMA International выработали ES5 в 2015 году и далее ES6 и далее 
---------------------------------------------
Переменные и области видимости 
let изменяемое значение
const - значение изменит нельзя - пишем капсом
var - старый способ, проблемы с областями видисости (не использовать! устаревший стандарт) - видна везде, ограничивается ТОЛЬУО блоком функции
Область видимости - участок кода, короты может обратииться к переменной и получить из мее значение
    локальная переменная
    глобальная переменная

Var может всплыть где угодно, для нее не существует областей видимости кроме боока функции. можно обьявить в конце кода, использовать в начале. с let const так не получится

if (3 > 1 ){ let a =5;} 
console.log(a) // error a is not defined - a создается let только в if 
if (3 > 1 ){ var b =5;} 
console.log(b) // 5 var создает везде

${переменная}
ОБратными кавычками
`вывести в консоль строку переменную: ${переменная} `
$_ спецсимволы в переменных разрешены
\n символ переноса строки
\ простой перенос строки в редакторе
---------------------------------------------------------------------
Подключить можно в HEAD (но нельзя). 
страница грузится сверху вниз, поэтому скрипт пишем в самом внизу перед закрывающим </body>:
   1. <script>
        let countButton = 0;
    </script>
    2.<script src="main.js"></script> - старый способ
    3. в теге head: грузятся параллельно с построением страницы
        <script async src="main1.js"></script> запустится когда загрухится, (плох потому что не знаешь когда загрузится и выполнится)
        <script defer src="main2.js"></script> запустится только тогда когда все теги созданным В ПРИОРИТЕТЕ
---------------------------------------------------------------------
Типы данных:
string строка
number число
    NaN - (не число при ошибке вычисилений), арифметически ничего не сделать ("привет" * 10 = NaN)
    Infinity, -Infinity бесконечность - деление на 0 и на -0
boolean булево значение
undefined - спец тип данных - присваивается вновь созданным, но не инициализированным переменным 
object обьект - хранит набор данных, к полям(свойствам) обращается через . или ключ в квадратных скобках
    array - упорядочный список элементов
    function 
null - спец значение, используется в основном с обьектами, что в переменной нет обьекта 
symbol - новый тип данных, создает уникальные ключи для свойст обьектов
BigInt большое число больше 2**53 - для сложных расчетов, в конце литера n 

typeof переменная - тип данных 
typeof null = object - баг
 
Перевод строки в число:
+srt унарный плюс получим Nan если не число или число с буквами
Number(str) функция конструктор для чисел
Number.parseInt(str) собирает число из строки посимвольно (str=64.3regb5) получим 64
Number.parseFloat(str) получим 64.3

контеканация:
если есть хоть одна строка с +, то это контеканация
если слева и справа число, то это сложение

------------------------------------------------------------------------
switch()
case
default

тернарный оператор ? для легких if
console.log(
    goodCount > 0 ? 'в корзине есть товары' : 'корзина пуста'
);

for(const i in ...) переберет ключи 
for(const val of ...) переберет знаения в массиве(итера)
arr.forEach(функция) - выполняет функцию для каждого элемента 
arr.forEach((value, index, arr) => {тело стрелочной функции});



-------------------------------------------------------------------------
function sayPrice(){
} после стандартного обьявления функции не стявятся ; - видна везде, обьявляется внизу function declaration
const fun2 = function (){}; вызывается только после обявляения function expression ставятся ;
Стрелочные функции:
const fn3 = () => {
    console.log(123);
};
const fn3 = () => console.log(123);
----------------------------------------------------------------------------------
Приведение типов:
Дают false:
""
0. -0, Nan
null, undefined
false

Инкремент - увеличение операнда на установленный фиксированный шаг а++
Декремент - уменьшение операнда на установленный фиксированный шаг а--
контеканация - сложение строк 

------------------------------------------------------------------------
Браузерное событие 
onclick="alert('Товар добавлен в корзину');"



------------------------------------------------------------------------
"use strict" - строгий режим JS

prompt('Введите число', default)
alert(вывести в модальное окно)
console.log();
Щкругление:
    Math.round() по правилам математики
    MAth.floor() вниз 
    Math.ceil() вверх 
    Math.trunc() просто откидывает дробную часть
    число.toFixed(2) - обрезает чсло с 2 знаками после точки и возвращает строку






трепачев задачи js 